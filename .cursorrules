# Iterative Development Process Guidelines

## Core Development Process
- Never provide complete solutions upfront; focus on one feature at a time
- Always follow this strict sequence for each feature:
  1. Design & Documentation: Start with diagrams and clear documentation
  2. Feature Specification: Define a single feature using Gherkin syntax
  3. Behavior Testing: Write BDD tests for the specified feature only
  4. Implementation: Only write code after the above steps are complete
- Do not proceed to the next step without explicit confirmation
- Do not show any implementation code until documentation, specification, and tests are complete
- Use mermaid diagrams for all design phases
- Wait for explicit confirmation before proceeding to the next development phase

## Design Phase
- Begin every feature with a design diagram
- Document the purpose, inputs, outputs, and constraints
- Discuss trade-offs and design decisions before proceeding

## Specification Phase
- Use Gherkin syntax (Given/When/Then) to specify behavior
- Focus on one user story or feature at a time
- Define acceptance criteria clearly
- Write specifications from the user's perspective, not the implementation perspective
- Use the "As a [role], I want [feature], So that [benefit]" format for feature descriptions

### User-Focused Specification Examples

✅ Good (User-Focused):
```gherkin
Feature: Telecom Data Source Management
  As a telecom test engineer
  I want to use different sources of telecom operator data
  So that I can create realistic test scenarios with accurate information

  Scenario: Use built-in telecom data for quick testing
    When I need to quickly generate telecom test data
    Then I should be able to use TelecomFaker without any configuration
    And it should provide realistic operator information out of the box
```

❌ Bad (Implementation-Focused):
```gherkin
Feature: Telecom Data Source Management
  As a developer
  I want to use different data sources
  So that I can have more data options

  Scenario: Use default static data source
    When I create a TelecomFaker instance with default settings
    Then it should use the static JSON data source
    And the data should be loaded from the JSON file
```

## Testing Phase
- Write behavior tests that match the Gherkin specifications
- Focus on testing the behavior, not the implementation
- Only proceed to implementation after tests are reviewed
- Write step definitions that maintain the user perspective from the feature file
- Avoid exposing implementation details in step definitions where possible
- Test the "what" not the "how" - verify outcomes, not mechanisms

### User-Focused Test Examples

✅ Good (User-Focused):
```python
@when('I need to quickly generate telecom test data')
def step_impl(context):
    # Implementation can use technical details
    context.faker = TelecomFaker()
    
@then('it should provide realistic operator information out of the box')
def step_impl(context):
    # Verify the outcome (realistic data) not the mechanism
    operator = context.faker.generate_operator()
    assert_that(operator, is_not(none()))
    assert_that(operator, has_key('name'))
    assert_that(operator, has_key('country'))
```

❌ Bad (Implementation-Focused):
```python
@when('I initialize the TelecomFaker with the StaticDataProvider')
def step_impl(context):
    context.faker = TelecomFaker(StaticDataProvider())
    
@then('the JSON file should be loaded into memory')
def step_impl(context):
    # Testing implementation details rather than outcomes
    assert_that(context.faker.data_provider.data, is_not(none()))
    assert isinstance(context.faker.data_provider, StaticDataProvider)
```

## Implementation Phase
- Implement only what's needed for the current feature
- Follow the test requirements strictly
- Refactor only after the feature is working

# Python Development Standards

## Key Principles
- Write concise, technical responses with accurate Python examples
- Use functional, declarative programming; avoid classes where possible
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission)
- Use lowercase with underscores for directories and files (e.g., tasks/data_processing.py)

## Python Coding Standards
- Always use f-strings for string formatting instead of concatenating strings
- Use type hints for all function signatures
- Prefer Pydantic models over raw dictionaries for input validation
- Use concise, one-line syntax for simple conditional statements (e.g., `if condition: execute_task()`)

## Error Handling and Validation
- Handle errors and edge cases at the beginning of functions
- Use early returns for error conditions to avoid deeply nested `if` statements
- Place the happy path last in the function for improved readability
- Avoid unnecessary `else` statements; use the `if-return` pattern instead
- Use guard clauses to handle preconditions and invalid states early
- Implement proper error logging and user-friendly error messages
- Use custom error types or error factories for consistent error handling

## Architecture Guidelines
- Use functional components (plain functions) and Pydantic models for validation
- Use declarative task definitions with clear return type annotations
- Use `def` for synchronous operations and `async def` for asynchronous ones
- Use middleware for logging, error monitoring, and performance optimization
